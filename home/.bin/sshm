#!/usr/bin/env python

import json
import sys
import subprocess
import os
import sshconf
import argparse


def parser() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog="sshm", description="FZF based SSH manager")
    parser.add_argument("-s", "--sshrc", action="store_true")
    parser.add_argument("hostname", nargs="?", default=None)
    return parser.parse_args()


def main() -> None:
    args = parser()
    if args.hostname:
        hostname = sys.argv[1]
        find_host_config(hostname)
    else:
        select_with_fzf(args.sshrc)
    sys.exit(0)


def find_host_config(hostname: str) -> None:
    for f in os.listdir(os.path.expanduser("~/.ssh/config.d")):
        ssh_config_file = os.path.expanduser(f"~/.ssh/config.d/{f}")
        ssh_config = sshconf.read_ssh_config(ssh_config_file)
        host = ssh_config.host(hostname)
        if host:
            max_width = max(len(word) for word in host.keys()) + 2
            name = "Name".ljust(max_width)
            print(f"{name}{hostname}")
            for k, v in host.items():
                print(f"{k.title().ljust(max_width)}{v}")


def select_with_fzf(use_sshrc: bool) -> None:
    py = (
        subprocess.run(["rtx", "which", "python"], stdout=subprocess.PIPE)
        .stdout.decode()
        .strip()
    )
    fzf_default_opts = f'+s +m +x +e --no-sort --height=40% --reverse --prompt="SSH > " --preview="{py} ~/.bin/sshm {{}}"'
    available_hosts = find_ssh_config_hosts()
    with open(os.path.expanduser("~/.config/sshm/frecency.json")) as f:
        frecency = json.load(f)
        for host, visits in frecency.items():
            if host in available_hosts:
                available_hosts[host] = visits
        available_hosts = [
            h[0]
            for h in sorted(available_hosts.items(), key=lambda x: x[1], reverse=True)
        ]
        fzf = subprocess.Popen(
            ["/opt/homebrew/bin/fzf"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            env={"FZF_DEFAULT_OPTS": fzf_default_opts, "SHELL": "/bin/zsh"},
        )
        output = fzf.communicate(input="\n".join(available_hosts).encode())
        if len(output) > 1:
            host = output[0].decode().strip()
            if host in available_hosts:
                host_visits = frecency.get(host, 0)
                frecency[host] = host_visits + 1
                if use_sshrc:
                    subprocess.run(["sshrc", host])
                else:
                    subprocess.run(["ssh", host])
    with open(os.path.expanduser("~/.config/sshm/frecency.json"), "w") as f:
        json.dump(frecency, f)


def find_ssh_config_hosts() -> dict[str, int]:
    hosts = {}
    for f in os.listdir(os.path.expanduser("~/.ssh/config.d")):
        ssh_config_file = os.path.expanduser(f"~/.ssh/config.d/{f}")
        ssh_config = sshconf.read_ssh_config(ssh_config_file)
        for host in ssh_config.hosts():
            hosts[host] = 0
    return hosts


if __name__ == "__main__":
    main()
