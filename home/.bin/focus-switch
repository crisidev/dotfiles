#!/usr/bin/env bash

# Input validation
if [[ -z $1 ]]; then
    echo "Usage: $0 <workspace-number>|startup|rebalance"
    exit 1
fi

WORKSPACE=$1

# File to store the previous and current workspace states
STATE_FILE="/tmp/.workspace_toggle_state"
WINDOW_FILE="/tmp/.workspace_window_state"

# Windows and workspaces mappings
declare -A WINDOWS_TO_WORKSPACES
WINDOWS_TO_WORKSPACES["kitty"]=0
WINDOWS_TO_WORKSPACES["firefox-esr-esr128"]=1
WINDOWS_TO_WORKSPACES["spotify"]=2
WINDOWS_TO_WORKSPACES["ferdium"]=4
WINDOWS_TO_WORKSPACES["org.signal.Signal"]=5

focus_workspace() {
    rm -f $WINDOW_FILE
    gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval \
        "global.workspace_manager.get_workspace_by_index($1).activate(global.get_current_time());"
}

focus_window_by_wm_class_instance() {
    gdbus call --session --dest org.gnome.Shell --object-path /de/lucaswerkmeister/ActivateWindowByTitle \
        --method de.lucaswerkmeister.ActivateWindowByTitle.activateByWmClassInstance "$1"
}

get_active_monitors() {
    xrandr | awk '/ connected/ && /[[:digit:]]x[[:digit:]].*+/{print $1}'
}

focus_to_previous_window() {
    read -r PREVIOUS_WINDOW <"$WINDOW_FILE"
    CURRENT_WINDOW=$(get_current_window)
    echo "$CURRENT_WINDOW" >$WINDOW_FILE
    echo "Focusing back to window $PREVIOUS_WINDOW"
    focus_window_by_wm_class_instance "$PREVIOUS_WINDOW"
    exit 0
}

get_current_window() {
    dbus-send --session --dest=org.gnome.Shell --print-reply=literal /org/gnome/Shell/Extensions/Windows \
        org.gnome.Shell.Extensions.Windows.List | jq -r ".[] | select (.in_current_workspace == true) |select (.focus == true) .wm_class_instance"
}

if [ "$WORKSPACE" = "startup" ]; then
    sleep 5
    focus_workspace 1
    sleep 0.5
    focus_workspace 4
    sleep 0.5
    focus_workspace 0
    sleep 0.5
    gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval "Main.overview.hide();"
    "$HOME"/.bin/clean-notifications
    exit 0
fi

if [ "$WORKSPACE" = "rebalance" ]; then
    dbus-send --session --dest=org.gnome.Shell --print-reply=literal /org/gnome/Shell/Extensions/Windows org.gnome.Shell.Extensions.Windows.List | jq -c '.[]' | while read -r window; do
        wm_class=$(echo "$window" | jq -r '.wm_class_instance')
        id=$(echo "$window" | jq -r '.id')
        if [[ -v WINDOWS_TO_WORKSPACES["$wm_class"] ]]; then
            workspace=${WINDOWS_TO_WORKSPACES["$wm_class"]}
            echo "Moving window $wm_class to workspace $workspace"
            gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell/Extensions/Windows --method org.gnome.Shell.Extensions.Windows.MoveToWorkspace "$id" "$workspace"
        fi
    done
    notify-send -a "Focus Switch" -i settings "All windows rebalanced"
    exit 0
fi

if [[ "$(get_active_monitors | wc -l)" -gt 1 ]]; then
    if [[ "$WORKSPACE" -eq 4 ]]; then
        if [[ -e $WINDOW_FILE ]]; then
            focus_to_previous_window
        fi
        CURRENT_WINDOW=$(get_current_window)
        echo "$CURRENT_WINDOW" >$WINDOW_FILE
        focus_window_by_wm_class_instance "ferdium"
        exit 0
    fi
fi

# Retrieve previous and current workspace states
PREVIOUS_WORKSPACE=""
CURRENT_WORKSPACE=""

if [[ -e $STATE_FILE ]]; then
    read -r CURRENT_WORKSPACE PREVIOUS_WORKSPACE <"$STATE_FILE"
fi

# Toggle logic: switch back to the previous workspace if selecting the same workspace again
if [[ "$WORKSPACE" == "$CURRENT_WORKSPACE" ]]; then
    if [[ -e $WINDOW_FILE ]]; then
        focus_to_previous_window
    fi
    TARGET_WORKSPACE=$PREVIOUS_WORKSPACE
    echo "Toggling back to workspace: $PREVIOUS_WORKSPACE"
else
    TARGET_WORKSPACE=$WORKSPACE
    echo "Switching to workspace: $WORKSPACE"
fi

# Update the state file with the new states
echo "$TARGET_WORKSPACE $CURRENT_WORKSPACE" >"$STATE_FILE"

# Activate the target workspace using gdbus
focus_workspace "$TARGET_WORKSPACE"
