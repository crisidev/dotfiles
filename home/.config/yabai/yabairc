#!/usr/bin/env bash

# signals
# run window focus routine in sketckybar
yabai -m signal --add event=window_focused action="/opt/homebrew/bin/bottombar --trigger window_focus"
yabai -m signal --add event=window_resized action="/opt/homebrew/bin/bottombar --trigger window_focus"

# handle adding and removing displays
yabai -m signal --add event=display_added action="$HOME/.config/yabai/screenchange"
yabai -m signal --add event=display_removed action="$HOME/.config/yabai/screenchange"

# yabai -m signal --add event=window_destroyed active=yes action="yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse &> /dev/null || yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id) &> /dev/null"
# yabai -m signal --add event=window_minimized active=yes action="if \$(yabai -m query --windows --window \$YABAI_WINDOW_ID | jq -r '.\"is-floating\"'); then yabai -m query --windows --window &> /dev/null || yabai -m window --focus mouse &> /dev/null || yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id) &> /dev/null; fi"

# global settings
yabai -m config mouse_follows_focus on
yabai -m config focus_follows_mouse autofocus
yabai -m config window_zoom_persist off
yabai -m config window_placement second_child
yabai -m config window_shadow on
yabai -m config window_origin_display focused
# yabai -m config window_opacity on
# yabai -m config window_opacity_duration 0.4
# yabai -m config active_window_opacity 1.0
# yabai -m config normal_window_opacity 0.95
yabai -m config split_ratio 0.40
yabai -m config auto_balance off

# paddings, bar and gaps
TOP_PADDING=6
DISPLAYS=$(yabai -m query --displays | jq '. | length')
if [ "$DISPLAYS" -gt 1 ]; then
    TOP_PADDING=8
fi

yabai -m config external_bar all:35:0
yabai -m config top_padding "$TOP_PADDING"
yabai -m config bottom_padding 46
yabai -m config left_padding 8
yabai -m config right_padding 8
yabai -m config window_gap 8

# mouse settings
yabai -m config mouse_modifier cmd
yabai -m config mouse_action1 move
yabai -m config mouse_action2 resize
yabai -m config mouse_drop_action swap

# rules
# application for desktop
yabai -m rule --add app="^Firefox$" space=2 sticky=off
yabai -m rule --add app="^Microsoft Outlook$" space=3
yabai -m rule --add app="^Microsoft Outlook$" title="^Calendar$" space=3
yabai -m rule --add app="^Spotify$" space=4
yabai -m rule --add app="^zoom.us$" space=5
yabai -m rule --add app="^Microsoft Teams \(work or school\)$" space=6
yabai -m rule --add app="^WhatsApp$" space=7
yabai -m rule --add app="^Telegram$" space=8
yabai -m rule --add app="^Signal$" space=9

# manual rules
yabai -m rule --add app="^Neovide$" manage=on
yabai -m rule --add app="^Skype$" sticky=off

# rules from windows.json
if [ -f "$HOME/.config/yabai/windows.json" ]; then
    # unmanaged windows by app
    jq -r '.apps | keys[]' "$HOME/.config/yabai/windows.json" | while read -r app; do
        yabai -m rule --add app="^$app\$" manage=off
    done

    # unmanaged windows by title
    jq -r '.titles | keys[]' "$HOME/.config/yabai/windows.json" | while read -r title; do
        yabai -m rule --add title="^$title\$" manage=off
    done

    # unmanaged windows by app and title
    jq -r '.apps_and_titles | to_entries[] | "\(.key)|\(.value.titles[])"' "$HOME/.config/yabai/windows.json" | while read -r app_and_title; do
        app=$(echo "$app_and_title" | cut -d'|' -f1)
        title=$(echo "$app_and_title" | cut -d'|' -f2)
        yabai -m rule --add app="^$app$" title="^$title$" manage=off
    done
fi

SCREEN_PRIMARY=$("$HOME/.bin/hs" -c "return hs.wm.screen_primary")
# cycle spaces if yabai was restarted by itself
if [ -e /tmp/yabai_matteobigoi.cycle_all_spaces_mission_control ]; then
    SCREEN_SECONDARY=$("$HOME/.bin/hs" -c "return hs.wm.screen_secondary")
    SCREEN_PRIMARY_OLD=$(awk '{print $1}' /tmp/yabai_matteobigoi.cycle_all_spaces_mission_control)
    SCREEN_SECONDARY_OLD=$(awk '{print $2}' /tmp/yabai_matteobigoi.cycle_all_spaces_mission_control)
    if [ -z "$SCREEN_PRIMARY_OLD" ] || [ "$SCREEN_PRIMARY" != "$SCREEN_PRIMARY_OLD" ] || [ "$SCREEN_SECONDARY" != "$SCREEN_SECONDARY_OLD" ]; then
        "$HOME/.bin/hs" -c "return hs.wm.cycle_all_spaces_mission_control()"
    fi
    rm -f /tmp/yabai_matteobigoi.cycle_all_spaces_mission_control
fi

# layout is always BSP
yabai -m config layout bsp

if [ "$SCREEN_PRIMARY" == "37D8832A-2D66-02CA-B9F7-8F30A301B230" ]; then
    yabai -m config --space 3 layout stack
fi

echo "yabai configuration loaded.."
